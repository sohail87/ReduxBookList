import React, {Component} from 'react';
import {connect} from 'react-redux';
import { bindActionCreators } from 'redux';
// bindActionCreators is a function
// used to make sure that the action that is generated by the action creator
// actually ends up flowing through ll the different reducers.
//
import { selectBook } from '../actions/index'; //import action creator 'selectBook'

class BookList extends Component {
  render() {
    //console.log(this.props.asdf) // -> 123
    return (
      <ul className="list-group col-sm-4">
        {this.renderList()}
      </ul>
    )
  }
  renderList() {
    return this.props.books.map((book) => {
      return (
        <li key={book.title}
          onClick={() => this.props.selectBook(book)}
          className="list-group-item">
          {book.title}
        </li>
      );
    });
  }
}

// Anything returned from this function will end up as props
// on the BookList container.
// whatever we pass here as the first argument is going to be available as props to our container
function mapDispatchToProps(dispatch) {
  // Whenever selectBook is called, the result shoudl be passed
  // to all of our reducers
  return bindActionCreators({ selectBook: selectBook }, dispatch);
  //the above is saying
  //OK, i understand that you are going to call selectBook,
  //i understand this is an action creator that your going to call at some point
  //whenever it gets called
  // i want to make sure that the result of it flows through this dispatch function right here
  // and this dispatch function is what takes all these actions and it basically recieves them
  // like a funnel
  // and its spits them back out to all the different reducers in our application
}


  // it takes in the entire application state as argument
  // whatever we return from this function will show up as props
  // inside of the class component (container)
  //
  // *** this function is the link between REDUX and REACT ***
function mapStateToProps(state){

  // whatever is returned will show up as props
  // inside of BookList
  return {
    //asdf: '123'
    books: state.books
  };
  //whatever is contained within this object
  //is going to be set equal to "this.props"
  // of our component
  //
}

//takes the map state to props function first () and the component second (),
//returning/exporting a container

// Promote BookList from a component to a container - it needs to know
// about this new dispatch method, selectBook. Make it available
// as a prop.
export default connect(mapStateToProps, mapDispatchToProps)(BookList);
// - it takes 2 sets of params ()()
// - the first function 'connect' returns another function and then that returned function is called immediately


//KEY FACTS
// 1. whenever the application state changes, this container will instantly render with the new list of books
// 2. using 'connect' to create a container, whenever the state changes
//   the object in the state function will be assigned as props to the component
